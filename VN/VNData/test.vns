@A = 10, @B = @A, @C = 3, @D = 0, @E = true, @F = false, @G = -13

$Add = @A + @B // 20
$Sub = @A - @C // 7

$Mul = @A * @B // 100
$Div = @A / @C // 3.33333...
$Rem = @A % @C // 1
$Pow = @A ** @C // 1000

$LShift = @A << @C // 80
$RShift = @A >> @C // 1

$LogAnd = @E && @F // false
$LogOr = @A || @C // true
$LogNot = !@E // false

$BitAnd = @A & @C // 2
$BitXor = @A ^ @C // 9
$BitOr = @A | @C // 11
$BitNot = ~@A // -11

$Equal = @E == @F // false
$NotEqual = @E != @F // true
$Lesser = @A < @B // false
$LesserEqual = @A <= @B // true
$Greater = @A > @C // true
$GreaterEqual = @A >= @C // true

$IfTest1 = $IfTest2 = false
if (@E != @F) $IfTest1 = true // If Test Expression
if (@E != @F) { // If Test Block
	$IfTest2 = true
}

// While Test (1~5 sum)
@a = 0, @b = 0, @c = 5
while (@a < @c) {
	@a ++
	@b += @a
}
$WhileTest = @b

// For Test (!5 Factorial)
for (@a = 1, @b = 1, @c = 5; @a <= @c; @a++) {
	@b *= @a
}
$ForTest = @b

$Positive = +@G // -13
$Negative = -@G // 13

$Inc = $Dec = 5

$IncPrefix = ++$Inc // 6
$IncPostfix = $Inc++ // 6
// $Inc == 7

$DecPrefix = --$Dec // 4
$DecPostfix = $Dec-- // 4
// $Dec == 3

$Concat = @A .. @B // ""1010""

$AssignAdd = $AssignSub = $AssignMul = $AssignDiv = $AssignRem = $AssignPow = $AssignOr = $AssignXor = $AssignAnd = $AssignLShift = $AssignRShift = @A
$AssignAdd += @C // 13
$AssignSub -= @C // 7
$AssignMul *= @C // 30
$AssignDiv /= @C // 3.33333...
$AssignRem %= @C // 1
$AssignPow **= @C // 1000
$AssignOr |= @C // 11
$AssignXor ^= @C // 9
$AssignAnd &= @C // 2
$AssignLShift <<= @C // 80
$AssignRShift >>= @C // 1

$NativeFunc = Add(1, 2) // 3
Test $NativeFunc // Print 3

func max(@a, @b) {
	if (@a > @b)
		return @a
	return @b
}
$RuntimeFunc = max(10, 20) // 20
